// Code generated by mcp-codegen. DO NOT EDIT.
package weather

import (
	"context"
	"encoding/json"
	"fmt"
	"slices"

	mcp "github.com/ktr0731/go-mcp"
	"github.com/ktr0731/go-mcp/codegen"
	"github.com/ktr0731/go-mcp/protocol"
)

// ServerPromptHandler is the interface for prompt handlers.
type ServerPromptHandler interface {
	HandlePromptWeatherReport(ctx context.Context, req *PromptWeatherReportRequest) (*mcp.GetPromptResult, error)
	HandlePromptWeatherAlert(ctx context.Context, req *PromptWeatherAlertRequest) (*mcp.GetPromptResult, error)
}

// PromptWeatherReportRequest contains input parameters for the weather_report prompt.
type PromptWeatherReportRequest struct {
	City     string `json:"city"`
	Language string `json:"language"`
}

// PromptWeatherAlertRequest contains input parameters for the weather_alert prompt.
type PromptWeatherAlertRequest struct {
	AlertType string `json:"alert_type"`
	Severity  string `json:"severity"`
}

// ResourceTemplateList contains all available ResourceTemplates.
var ResourceTemplateList = []mcp.ResourceTemplate{
	{
		URITemplate: "weather://forecast/{city}",
		Name:        "City Weather Forecast",
		Description: "Weather forecast for a specific city",
		MimeType:    "application/json",
	},
	{
		URITemplate: "weather://historical/{city}/{date}",
		Name:        "Historical Weather Data",
		Description: "Historical weather data for a specific city and date",
		MimeType:    "application/json",
	},
}

// ServerToolHandler is the interface for tool handlers.
type ServerToolHandler interface {
	HandleToolConvertTemperature(ctx context.Context, req *ToolConvertTemperatureRequest) (*mcp.CallToolResult, error)
	HandleToolCalculateHumidityIndex(ctx context.Context, req *ToolCalculateHumidityIndexRequest) (*mcp.CallToolResult, error)
}

// ToolConvertTemperatureRequest contains input parameters for the convert_temperature tool.
type ToolConvertTemperatureRequest struct {
	Temperature float64 `json:"temperature"`
	FromUnit    string  `json:"from_unit"`
	ToUnit      string  `json:"to_unit"`
}

// ToolCalculateHumidityIndexRequest contains input parameters for the calculate_humidity_index tool.
type ToolCalculateHumidityIndexRequest struct {
	Temperature float64 `json:"temperature"`
	Humidity    float64 `json:"humidity"`
}

// PromptList contains all available prompts.
var PromptList = []mcp.Prompt{
	{
		Name:        "weather_report",
		Description: "Generate a weather report based on weather data",
		Arguments: []mcp.PromptArgument{
			{
				Name:        "city",
				Description: "City name",
				Required:    true,
			},
			{
				Name:        "language",
				Description: "Report language (e.g. 'en', 'ja')",
			},
		},
	},
	{
		Name:        "weather_alert",
		Description: "Generate a weather alert message",
		Arguments: []mcp.PromptArgument{
			{
				Name:        "alert_type",
				Description: "Type of alert (e.g. 'rain', 'snow', 'heat')",
				Required:    true,
			},
			{
				Name:        "severity",
				Description: "Alert severity (1-5)",
				Required:    true,
			},
		},
	},
}

// JSON Schema type definitions generated from inputSchema
var (
	ToolConvertTemperatureInputSchema     = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"temperature":{"type":"number","description":"Temperature value to convert"},"from_unit":{"type":"string","enum":["celsius","fahrenheit"],"description":"Source temperature unit"},"to_unit":{"type":"string","enum":["celsius","fahrenheit"],"description":"Target temperature unit"}},"additionalProperties":false,"type":"object","required":["temperature","from_unit","to_unit"]}`)
	ToolCalculateHumidityIndexInputSchema = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"temperature":{"type":"number","description":"Temperature in Celsius"},"humidity":{"type":"number","description":"Relative humidity percentage (0-100)"}},"additionalProperties":false,"type":"object","required":["temperature","humidity"]}`)
)

// ToolList contains all available tools.
var ToolList = []mcp.Tool{
	{
		Name:        "convert_temperature",
		Description: "Convert temperature between Celsius and Fahrenheit",
		InputSchema: ToolConvertTemperatureInputSchema,
	},
	{
		Name:        "calculate_humidity_index",
		Description: "Calculate humidity index based on temperature and humidity",
		InputSchema: ToolCalculateHumidityIndexInputSchema,
	},
}

// NewHandler creates a new MCP handler.
func NewHandler(promptHandler ServerPromptHandler, resourceHandler mcp.ServerResourceHandler, toolHandler ServerToolHandler, completionHandler mcp.ServerCompletionHandler) *mcp.Handler {
	h := &mcp.Handler{}
	h.Capabilities = mcp.ServerCapabilities{
		Prompts: &mcp.PromptCapability{},
		Resources: &mcp.ResourceCapability{
			Subscribe:   true,
			ListChanged: true,
		},
		Tools:       &mcp.ToolCapability{},
		Completions: &mcp.CompletionsCapability{},
		Logging:     &mcp.LoggingCapability{},
	}
	h.Implementation = protocol.Implementation{
		Name:    "Weather Forecast MCP Server",
		Version: "1.0.0",
	}
	h.Prompts = PromptList
	h.PromptHandler = mcp.ServerHandlerFunc[protocol.GetPromptRequestParams](func(ctx context.Context, method string, req protocol.GetPromptRequestParams) (any, error) {
		switch method {
		case "prompts/get":
			switch req.Name {
			case "weather_report":
				var in PromptWeatherReportRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				return promptHandler.HandlePromptWeatherReport(ctx, &in)
			case "weather_alert":
				var in PromptWeatherAlertRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				return promptHandler.HandlePromptWeatherAlert(ctx, &in)
			default:
				return nil, fmt.Errorf("prompt not found: %s", req.Name)
			}
		default:
			return nil, fmt.Errorf("method %s not found", method)
		}
	})
	h.ResourceHandler = resourceHandler
	h.ResourceTemplates = ResourceTemplateList
	h.Tools = ToolList
	h.ToolHandler = mcp.ServerHandlerFunc[protocol.CallToolRequestParams](func(ctx context.Context, method string, req protocol.CallToolRequestParams) (any, error) {
		idx := slices.IndexFunc(ToolList, func(t mcp.Tool) bool {
			return t.Name == req.Name
		})
		if idx == -1 {
			return nil, fmt.Errorf("tool not found: %s", req.Name)
		}
		switch method {
		case "tools/call":
			switch req.Name {
			case "convert_temperature":
				var in ToolConvertTemperatureRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := codegen.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolConvertTemperature(ctx, &in)
			case "calculate_humidity_index":
				var in ToolCalculateHumidityIndexRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := codegen.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolCalculateHumidityIndex(ctx, &in)
			default:
				return nil, fmt.Errorf("tool not found: %s", req.Name)
			}
		default:
			return nil, fmt.Errorf("method %s not found", method)
		}
	})
	h.CompletionHandler = completionHandler
	return h
}
