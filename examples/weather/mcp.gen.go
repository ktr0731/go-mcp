// Code generated by mcp-codegen. DO NOT EDIT.
package weather

import (
	"context"
	"encoding/json"
	"fmt"
	"slices"

	mcp "github.com/ktr0731/go-mcp"
	"github.com/ktr0731/go-mcp/protocol"
)

// ServerPromptHandler is the interface for prompt handlers.
type ServerPromptHandler interface {
}

// ServerToolHandler is the interface for tool handlers.
type ServerToolHandler interface {
	HandleToolConvertTemperature(ctx context.Context, req *ToolConvertTemperatureRequest) (*mcp.CallToolResult, error)
}

// ConvertTemperatureFromUnitType represents possible values for from_unit
type ConvertTemperatureFromUnitType string

const (
	ConvertTemperatureFromUnitTypeCelsius    ConvertTemperatureFromUnitType = "celsius"
	ConvertTemperatureFromUnitTypeFahrenheit ConvertTemperatureFromUnitType = "fahrenheit"
)

// ConvertTemperatureToUnitType represents possible values for to_unit
type ConvertTemperatureToUnitType string

const (
	ConvertTemperatureToUnitTypeCelsius    ConvertTemperatureToUnitType = "celsius"
	ConvertTemperatureToUnitTypeFahrenheit ConvertTemperatureToUnitType = "fahrenheit"
)

// ToolConvertTemperatureRequest contains input parameters for the convert_temperature tool.
type ToolConvertTemperatureRequest struct {
	Temperature float64                        `json:"temperature"`
	FromUnit    ConvertTemperatureFromUnitType `json:"from_unit"`
	ToUnit      ConvertTemperatureToUnitType   `json:"to_unit"`
}

// PromptList contains all available prompts.
var PromptList = []protocol.Prompt{}

// JSON Schema type definitions generated from inputSchema
var (
	ToolConvertTemperatureInputSchema = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"temperature":{"type":"number","description":"Temperature value to convert"},"from_unit":{"type":"string","enum":["celsius","fahrenheit"],"description":"Source temperature unit"},"to_unit":{"type":"string","enum":["celsius","fahrenheit"],"description":"Target temperature unit"}},"additionalProperties":false,"type":"object","required":["temperature","from_unit","to_unit"]}`)
)

// ToolList contains all available tools.
var ToolList = []protocol.Tool{
	{
		Name:        "convert_temperature",
		Description: "Convert temperature between Celsius and Fahrenheit",
		InputSchema: ToolConvertTemperatureInputSchema,
	},
}

// NewHandler creates a new MCP handler.
func NewHandler(toolHandler ServerToolHandler) *mcp.Handler {
	h := &mcp.Handler{}
	h.Capabilities = protocol.ServerCapabilities{
		Tools:   &protocol.ToolCapability{},
		Logging: &protocol.LoggingCapability{},
	}
	h.Implementation = protocol.Implementation{
		Name:    "Weather Forecast MCP Server",
		Version: "1.0.0",
	}
	h.Tools = ToolList
	h.ToolHandler = protocol.ServerHandlerFunc[protocol.CallToolRequestParams](func(ctx context.Context, method string, req protocol.CallToolRequestParams) (any, error) {
		idx := slices.IndexFunc(ToolList, func(t protocol.Tool) bool {
			return t.Name == req.Name
		})
		if idx == -1 {
			return nil, fmt.Errorf("tool not found: %s", req.Name)
		}
		switch method {
		case "tools/call":
			switch req.Name {
			case "convert_temperature":
				var in ToolConvertTemperatureRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolConvertTemperature(ctx, &in)
			default:
				return nil, fmt.Errorf("tool not found: %s", req.Name)
			}
		default:
			return nil, fmt.Errorf("method %s not found", method)
		}
	})
	return h
}
